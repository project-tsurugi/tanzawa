## Help message resource bundle
# charset: UTF-8
#
# "\help X Y Z" mapped to key "command.x.y.z" 
# "command.x=@y" replaces "command.y"

# header of bare help message
help=Available commands:\n\
\\exit - exit script.\n\
\\halt - exit script forcibly.\n\
\\help - show this message.\n\
\\help <command> - show help message of the command (see below).\n\
\\show <option> - show information.\n\
\\status - show transaction status.\n\
START TRANSACTION - starts a transaction.\n\
COMMIT - commits the current transaction.\n\
ROLLBACK - revokes the current transaction.\n\
EXPLAIN - displays execution plan of the statement.\n\
(other statements) - submit SQL command to server.\n\
\n\
<command>:

# missing message
unrecognized=Unrecognized help command.\n\
Please type \\help to show available help commands.

## special command
# exit
special.exit=\\exit - exit script.
# halt
special.halt=\\halt - exit script forcibly.
# help
special.help=\\help - show help message.\n\
\\help <command> - show help message of the command.
# set
special.set=\\set <key> <value> - set client variable.
# show
special.show=\\show transaction - show transaction status.\n\
\\show table <name> - show table metadata.\n\
\\show client [<key>] - show client variable.
# status
special.status=\\status - show transaction status.

## SQL command
# START TRANSACTION
command.start=@start.transaction
command.start.transaction=Starts a new transaction.\n\
Syntax:\n\
START [ LONG ] TRANSACTION <transaction-option>*\n\
\n\
LONG - Optimize this transaction for long-running operation.\n\
\       It can reduce abort ratio, but will decrease transaction throughput.\n\
\       The following transaction option will enable this option implicitly:\n\
\       - READ ONLY\n\
\       - READ ONLY IMMEDIATE\n\
\       - WRITE PRESERVE\n\
\       - READ AREA\n\
\n\
<transaction-option>:\n\
READ ONLY - the transaction never insert/update/delete any rows.\n\
READ ONLY IMMEDIATE - same to "READ ONLY".\n\
READ ONLY DEFERRABLE - the transaction never insert/update/delete any rows, may retrieve not fresh rows.\n\
WRITE PRESERVE <table-name> [, ...] - declares insert/update/delete target tables, if this is specified,\n\
\                                      the transaction cannot modify other tables.\n\
READ AREA INCLUDE - <table-name> [, ...] - declares referring (select/insert/update/delete) tables,\n\
\                                           if this is specified, the transaction cannot touch other tables.\n\
READ AREA EXCULUDE - <table-name> [, ...] - declares NEVER referring (select/insert/update/delete) tables,\n\
\                                            if this is specified, the transaction cannot touch those tables.\n\
EXECUTE PRIOR - executes this transaction prior to any other transactions.\n\
\                If there are running transactions are available, this transaction will start after the running\n\
\                transactions will have been finished.\n\
\                To enable this feature, specify "START LONG TRANSACTION".\n\
EXECUTE PRIOR DEFERRABLE - same to "EXECUTE PRIOR".\n\
EXECUTE PRIOR IMMEDIATE - executes this transaction prior to any other transactions.\n\
\                          If there are running transactions are available, the running will be failed.\n\
\                          To enable this feature, specify "START LONG TRANSACTION".\n\
EXECUTE EXCLUDING - Behaves like as "EXECUTE PRIOR", and exhibits new transactions until this transaction was finished. \n\
EXECUTE EXCLUDING IMMEDIATE - Behaves like as "EXECUTE PRIOR IMMEDIATE", and exhibits new transactions \n\
\                              until this transaction was finished.\n\
AS <label> - sets a label to the transaction.\n\
WITH <key>=<value> [,...] - sets transaction configurations.
command.begin=@start.transaction
command.begin.transaction=@start.transaction

# COMMIT
command.commit=Commits the current transaction.\n\
Syntax:\n\
COMMIT [ <commit-option> ]\n\
\n\
<commit-option>:\n\
WAIT FOR ACCEPTED - wait for commit is accepted and it will never lost except system errors.\n\
WAIT FOR AVAILABLE - wait for commit is available for other transactions and it will never lost except system errors.\n\
WAIT FOR STORED - wait for commit is stored to the local file system.\n\
WAIT FOR PROPAGATED - commit is propagated to the whole system.\n\

# ROLLBACK
command.rollback=Revokes this current transaction.\n\
Syntax:\n\
ROLLBACK

# EXPLAIN
command.explain=Displays execution plan of the statement.\n\
Syntax:\n\
EXPLAIN [ (<explain-option>, ...) ] <target-statement>\n\
\n\
<starget-statement>:\n\
(any DML statement) - target statement to display its execution plan information\n\
\n\
<explain-option>:\n\
plan.verbose - enables verbose executable plan.\n\
plan.output = '/path/to/output.txt' - saves raw executable plan information text.\n\
dot.output = '/path/to/output.{dot,png,...}' - visualizes execution plan using Graphviz DOT.\n\
dot.verbose - enables verbose graph output.\n\
dot.executable = '/path/to/dot' - executable path of Graphviz DOT comand.\n\
dot.graph.<name> = <value> - graph attribute flag of Graphviz DOT comand.\n\
dot.node.<name> = <value> - node attribute flag of Graphviz DOT comand.\n\
dot.edge.<name> = <value> - edge attribute flag of Graphviz DOT comand.
