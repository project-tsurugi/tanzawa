plugins {
    id 'tanzawa.java-base'
    id 'checkstyle'

    id 'com.github.spotbugs'
}

if (hasProperty('mavenLocal')) {
    repositories {
        mavenLocal()
    }
} else {
    repositories {
        maven {
            url 'https://maven.pkg.github.com/project-tsurugi/*'
            content {
                includeGroupByRegex 'com\\.tsurugidb.*'
            }
            credentials {
                username findProperty('gpr.user') ?: System.getenv('GPR_USER')
                password findProperty('gpr.key') ?: System.getenv('GPR_KEY')
            }
        }
    }
}

repositories {
    mavenCentral {
        content {
            excludeGroupByRegex 'com\\.tsurugidb.*'
        }
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 8, 'hours'
}

java {
    withSourcesJar()
}

dependencies {
    testImplementation(platform('org.junit:junit-bom:5.9.0'))
    testImplementation('org.junit.jupiter:junit-jupiter')
}

checkstyle {
    if ('strict' == findProperty('checkMode')) {
        maxWarnings = 0
    }
}

spotbugsMain {
    reports {
        xml {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.xml")
        }
    }
}

spotbugsTest.enabled = false
checkstyleTest.enabled = false

task testsJar(type: Jar) {
    classifier 'tests'
    from sourceSets.test.output
}

jar {
    manifest.attributes (
        'Build-Timestamp': buildTimestamp,
        'Build-Revision' : buildRevision,
        'Created-By'     : createdBy,
        'Build-Jdk'      : buildJdk,
        'Build-OS'       : buildOs,
    )
}

tasks.named('test') {
    useJUnitPlatform()

    testLogging {
        showStandardStreams true
        events 'started', 'skipped', 'passed', 'failed'
        exceptionFormat 'full'
    }
}

task showTsubakuroManifest {
    doLast {
        def tsubakuroJar = configurations["compileClasspath"].filter {
            it.name.startsWith("tsubakuro-session")
        }
        def version = resources.text.fromArchiveEntry(tsubakuroJar, "META-INF/MANIFEST.MF")
        print(version.asString())
    }
}

task writeVersion(type: WriteProperties) {
    description 'generate version file to META-INF/tsurugidb/{project.name}.properties'
    inputs.property('Build-Revision', buildRevision)
    outputFile "${project.buildDir}/generated/version/META-INF/tsurugidb/${project.name}.properties"
    properties (
        'Build-Timestamp': buildTimestamp,
        'Build-Revision' : buildRevision,
        'Created-By'     : createdBy,
        'Build-Jdk'      : buildJdk,
        'Build-OS'       : buildOs,
    )
}

sourceSets.main.output.dir("${project.buildDir}/generated/version")
processResources.dependsOn writeVersion
